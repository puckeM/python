import telebot
import openpyxl
import os
import logging
from PIL import Image
import schedule
import time
import threading
from datetime import datetime


#—Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
from bot.materials import def_get_text

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–¥–µ–Ω–∏—è –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',level=logging.INFO)


bot = telebot.TeleBot('7324666918:AAENCFrgssoHCMVBCBnOmT1SH1Nz1H49YR0')

# —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
training_schedule = {
    'Monday': ['18:00'],
    'Wednesday': ['18:00'],
    'Friday': ['18:00']
}


# —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ excel –∏ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –∏–ª–∏ –Ω–µ—Ç
if not os.path.exists('player_data.xlsx'):
    workbook = openpyxl.Workbook()

    sheet = workbook.active
    sheet['A1'] = '–ò–º—è'
    sheet['B1'] = '–í–µ—Å'
    sheet['C1'] = '–†–æ—Å—Ç'
    sheet['D1'] = '–§–∞–∫—É–ª—å—Ç–µ—Ç'
    sheet['E1'] = '–õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏'
    sheet['F1'] = '–õ—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±'

    for column in range(1, 7):
        sheet.column_dimensions[chr(column + 64)].width = 30

else:
    workbook = openpyxl.load_workbook('player_data.xlsx')
    sheet = workbook.active


# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
player_data = {}
admin_mode = False
player_registered = {}
user_hi = False
open_photo = True

# —Ñ–ª–∞–≥–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
flag_schedule = False

# —Ñ—É–Ω–∫—Ü–∏–∏

# —Ñ—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
def training_reminder(chat_id): #–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    current_day = datetime.now().strftime('%A')
    current_time = datetime.now().strftime('%H:%M')

    if current_time in training_schedule.get(current_day, []):
        bot.send_message(chat_id,f"–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ {current_time}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.")

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    b1 = telebot.types.KeyboardButton('‚úÖ')
    b2 = telebot.types.KeyboardButton('‚ùå')
    markup.add(b1, b2)

    bot.send_message(chat_id, '–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?', reply_markup=markup)

def end_training(chat_id):
    time.sleep(3600)  #—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å, –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    summary = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n- –†–∞–∑–º–∏–Ω–∫–∞\n- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n- –ó–∞–º–∏–Ω–∫–∞"
    bot.send_message(chat_id, summary)

def schedule_trainings():
    for chat_id in player_registered.keys():
        training_reminder(chat_id)
        threading.Thread(target=end_training, args=(chat_id,)).start()

def job():
    current_day = datetime.now().strftime('%A')
    current_time = datetime.now().strftime('%H:%M')

    if current_time in training_schedule.get(current_day, []):
        schedule_trainings()

schedule.every(1).minutes.do(job)

def process_schedule(message):
    global training_schedule

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ';'
        days = message.text.split(';')
        new_schedule = {}

        for day in days:
            parts = day.split()
            day_name = parts[0].strip()
            times = [time.strip() for time in parts[1].split(',')]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            new_schedule[day_name] = times

        training_schedule = new_schedule
        bot.send_message(message.chat.id, f"–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n{training_schedule}")
        verify_admin(message, 'admin')


    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        print(e)
        new_schedule(message)
#

'''def set_schedule(message):
    global admin_mode, fail_reg, flag_exit

    if admin_mode and not fail_reg:
        markup = telebot.types.InlineKeyboardMarkup()

        b1 = telebot.types.InlineKeyboardButton('exit', callback_data='exit')
        markup.add(b1)

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å1 –≤—Ä–µ–º—è1, –≤—Ä–µ–º—è2; –¥–µ–Ω—å2 –≤—Ä–µ–º—è1, –≤—Ä–µ–º—è2'. –ü—Ä–∏–º–µ—Ä: 'Monday 18:00, 19:00; Wednesday 18:00'.",
                         reply_markup=markup)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

        print(training_schedule)

        if flag_exit:
            verify_admin(message, 'admin')
            flag_exit = False

        else:
            get_process_schedule(message)

    elif admin_mode and fail_reg:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —ë—â–µ —Ä–∞–∑ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å1 –≤—Ä–µ–º—è1, –≤—Ä–µ–º—è2; –¥–µ–Ω—å2 –≤—Ä–µ–º—è1, –≤—Ä–µ–º—è2'. –ü—Ä–∏–º–µ—Ä: 'Monday 18:00, 19:00; Wednesday 18:00'.")
        print(training_schedule)
        fail_reg = False
        get_process_schedule(message)'''
# —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ set_schedule
def ask_for_continue(message):
    global flag_schedule

    flag_schedule = True
    bot.send_message(message.chat.id, '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', reply_markup=return_to_back())

def new_schedule(message):
    global admin_mode

    if admin_mode:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å1 –≤—Ä–µ–º—è1, –≤—Ä–µ–º—è2; –¥–µ–Ω—å2 –≤—Ä–µ–º—è1, –≤—Ä–µ–º—è2'. –ü—Ä–∏–º–µ—Ä: 'Monday 18:00, 19:00; Wednesday 18:00'.")
        bot.register_next_step_handler(message, process_schedule)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
        start(message)


#

'''def exit():
    global flag_exit

    markup = telebot.types.InlineKeyboardMarkup()
    flag_exit = True

    b1 = telebot.types.InlineKeyboardButton('exit', callback_data='exit')
    markup.add(b1)

    return markup'''

def keyboard_start():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)

    b1 = telebot.types.KeyboardButton('–ê–¥–º–∏–Ω')
    b2 = telebot.types.KeyboardButton('üìÑ')
    b3 = telebot.types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ1')
    b4 = telebot.types.KeyboardButton('–ú–∞—Ç–µ—Ä')

    markup.add(b1, b2, b3, b4)
    return markup

def return_to_back():
    markup = telebot.types.InlineKeyboardMarkup()
    b1 = telebot.types.InlineKeyboardButton('‚úÖ', callback_data='yes_continue')
    b2 = telebot.types.InlineKeyboardButton('‚ùå', callback_data='no_continue')
    markup.add(b1, b2)

    return markup

def create_keyboard():
    markup = telebot.types.InlineKeyboardMarkup()
    item1 = telebot.types.InlineKeyboardButton('‚ñ∂', callback_data='start_func')
    item2 = telebot.types.InlineKeyboardButton('‚ùî', callback_data='help')
    markup.add(item1, item2)
    return markup

def create_keybord_admin():
    markup = telebot.types.InlineKeyboardMarkup()
    item1 = telebot.types.InlineKeyboardButton('‚ñ∂', callback_data='start_func')
    item2 = telebot.types.InlineKeyboardButton('‚ùî', callback_data='help')
    markup.add(item1, item2)
    return markup

def create_keybord_on_message():
    b1 = telebot.types.InlineKeyboardButton('1', callback_data='material1')
    b2 = telebot.types.InlineKeyboardButton('2', callback_data='material2')
    b3 = telebot.types.InlineKeyboardButton('3', callback_data='material3')
    b4 = telebot.types.InlineKeyboardButton('4', callback_data='material4')
    b5 = telebot.types.InlineKeyboardButton('5', callback_data='material5')
    b6 = telebot.types.InlineKeyboardButton('6', callback_data='material6')
    b7 = telebot.types.InlineKeyboardButton('7', callback_data='material7')
    b8 = telebot.types.InlineKeyboardButton('8', callback_data='material8')
    b9 = telebot.types.InlineKeyboardButton('9', callback_data='material9')
    b10 = telebot.types.InlineKeyboardButton('10', callback_data='materialA')

    list1_5 = [b1, b2, b3, b4, b5]
    list6_10 = [b6, b7, b8, b9, b10]

    buttons = [list1_5, list6_10]

    markup = telebot.types.InlineKeyboardMarkup(buttons)

    return markup

# –º–µ—Ç–æ–¥–∏—á–∫–∏
def material(x):
    #file = f'materials/text{x}/1_1.jpg'
    txt = ''
    i = 0
    with open(f'materials/text{x}/text.txt', 'r', encoding='utf-8') as obj:
        if x == '2':
            for line in obj.readlines():
                i += 1
                if i == 1:
                    txt += line + '\n'
                else:
                    txt += line
            i = 0
        else:
            for line in obj.readlines():
                txt += line

        return txt


def photos(x):
    global open_photo

    if open_photo:
        file1 = Image.open(f'materials/text{x}/1_1.jpg')
        open_photo = False
        return file1

    else:
        file2 = Image.open(f'materials/text{x}/1_2.jpg')
        open_photo = True

        return file2

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–æ–ø–æ–≤–µ—â–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö

@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ1')
def handle_message(message):
    chat_id = message.chat.id

    if message.text == '‚úÖ':
        player_registered[chat_id] = 'confirmed'
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ñ–¥–µ–º –≤–∞—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.")
    elif message.text == '‚ùå':
        player_registered[chat_id] = 'not_confirmed'
        bot.send_message(chat_id, '–ü–æ–Ω—è–ª–∏, —á—Ç–æ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏. –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.')
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.")

#
@bot.message_handler(commands=['start'])
def start(message): # –Ω–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    global admin_mode, user_hi
    admin_mode = False # —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–∞

    # –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫

    #item3 = telebot.types.KeyboardButton('–ê–¥–º–∏–Ω')
    #item4 = telebot.types.KeyboardButton('üìÑ')
    #item5 = telebot.types.KeyboardButton('–ú–∞—Ç–µ—Ä')
    #item6 = telebot.types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ1')

    if not user_hi:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç', reply_markup=keyboard_start())

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_keyboard()) # reply_marlup –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–µ—Ö —Å–∞–º—ã—Ö –∫–Ω–æ–ø–æ–∫

@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ1')
def get_schedule_users(message):
    global training_schedule
    bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n'
                                      f'{training_schedule}')
    start(message)

@bot.message_handler(func=lambda message: message.text == '–ú–∞—Ç–µ—Ä')
def get_materials(message):
    bot.send_message(message.chat.id, '1 - –∑–∞—Ö–≤–∞—Ç asdlkasldkasdka;m asdlkasldk;asd\n'
                                      '2 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '3 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '4 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '5 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '6 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '7 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '8 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '9 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n'
                                      '10 - asdlasldkasdk ;lkad;la kslkd asdkasdkas;dlkl\n', reply_markup=create_keybord_on_message())

#–≤—ã–¥–∞—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@bot.callback_query_handler(func=lambda call: call.data == 'material1')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material2')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material3')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material4')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material5')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material6')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material7')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material8')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'material9')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

@bot.callback_query_handler(func=lambda call: call.data == 'materialA')
def get_material(call):
    global user_hi

    user_hi = True
    message = call.message
    x = call.data[-1]

    bot.send_media_group(message.chat.id, media=[telebot.types.InputMediaPhoto(photos(x)), telebot.types.InputMediaPhoto(photos(x), caption=material(x))])

    bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Çe –µ—â—ë —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å?', reply_markup=return_to_back())

# end

@bot.callback_query_handler(func=lambda call: call.data == 'yes_continue')
def return_to(call):
    global flag_schedule
    message = call.message

    if flag_schedule:
        new_schedule(message)

    else:
        get_materials(message)

@bot.callback_query_handler(func=lambda call: call.data == 'no_continue')
def return_back(call):
    global flag_schedule
    message = call.message

    if flag_schedule:
        verify_admin(message)
    else:
        start(message)

@bot.callback_query_handler(func=lambda call: call.data == 'help')
def help(call):
    global admin_mode, user_hi

    #user_hi = True
    message = call.message
    if not admin_mode:
        bot.send_message(message.chat.id, '‚ñ∂ - –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                                          '‚ùî - –ø–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞\n'
                                          'üìÑ - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ')

        start(message)
    elif admin_mode:
        bot.send_message(message.chat.id, '‚ñ∂ - –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                                          '‚ùî - –ø–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞\n'
                                          'üìÑ - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ\n'
                                          'ADMIN CHECK')

        verify_admin(message, 'admin')


# –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è collect_data
@bot.callback_query_handler(func=lambda call: call.data == 'start_func')
def collect_data(call):
    global admin_mode, user_hi

    user_hi = True
    message = call.message
    user_ip = message.chat.id # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    if user_ip not in player_registered:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(message, get_weight)
    elif admin_mode:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:')
        bot.register_next_step_handler(message, get_weight)
    else:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?')
        bot.register_next_step_handler(message, edit_data)

# –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ, –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–∞–∂–¥—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
def get_weight(message):
    global admin_mode

    # –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞, –∑–Ω–∞—á–∏—Ç —É –Ω–µ–≥–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, –∑–Ω–∞—á–∏—Ç –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

    if admin_mode:
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑—É
        row = sheet.max_row
        sheet.cell(row=row, column=1, value=message.text.title())

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞, –∑–Ω–∞—á–∏—Ç –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

    else:
        player_data['name'] = message.text.title()

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å')
    bot.register_next_step_handler(message, get_height) # —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                                                        # —Å—Ä–∞–∑—É –∂–µ –∑–∞ –Ω–µ–π —Å–ª–µ–¥–æ–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å–∞–Ω–∞ –≤ —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ

# –¥–∞–ª—å—à–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏ –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def get_height(message):
    global admin_mode

    if admin_mode:
        row = sheet.max_row
        sheet.cell(row=row, column=2, value=message.text)
    else:
        player_data['weight'] = message.text

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç:")
    bot.register_next_step_handler(message, get_faculty)

def get_faculty(message):
    global admin_mode

    if admin_mode:
        row = sheet.max_row
        sheet.cell(row=row, column=3, value=message.text)
    else:
        player_data['height'] = message.text

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:')
    bot.register_next_step_handler(message, get_books)

def get_books(message):
    global admin_mode

    if admin_mode:
        row = sheet.max_row
        sheet.cell(row=row, column=4, value=message.text)
    else:
        player_data['faculty'] = message.text

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏:')
    bot.register_next_step_handler(message, get_club)

def get_club(message):
    global admin_mode

    if admin_mode:
        row = sheet.max_row
        sheet.cell(row=row, column=5, value=message.text)
    else:
        player_data['books'] = message.text.title()

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±:')
    bot.register_next_step_handler(message, save_data)

def save_data(message):
    global admin_mode

    user_ip = message.chat.id

    if admin_mode:
        row = sheet.max_row
        sheet.cell(row=row, column=6, value=message.text)
    else:
        player_data['club'] = message.text.title()
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏–µ –≤—Å–µ—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    row = [player_data['name'], player_data['weight'], player_data['height'], player_data['faculty'], player_data['books'], player_data['club']]
    sheet.append(row)
    workbook.save('player_data.xlsx')

    if admin_mode:
        player_registered[user_ip] = False
    else:
        player_registered[user_ip] = True
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text == '–§–∞–π–ª')
def send_file(message):
    if admin_mode:
        workbook.save('player_data.xlsx')
        with open('player_data.xlsx', 'rb') as file:
            bot.send_document(message.chat.id, file)
    else:
        bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞.')

#@bot.callback_query_handler(func=lambda call: call.data == 'start_admin')
@bot.message_handler(func=lambda message: message.text == '–ê–¥–º–∏–Ω')
def admin_mode(message):
    global admin_mode

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:')
    bot.register_next_step_handler(message, admin_password)

def admin_password(message):
    login = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, verify_admin, login)

def verify_admin(message, login):
    global admin_mode, user_hi, admin_hi

    user_hi = True
    password = message.text
    if (login == 'admin' and password == 'password') or admin_mode:
        if admin_mode == True:
            markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
            #item1 = telebot.types.KeyboardButton('–°—Ç–∞—Ä—Ç')
            #item2 = telebot.types.KeyboardButton('–§–∞–π–ª')
            item3 = telebot.types.KeyboardButton('–í—ã—Ö–æ–¥')
            item4 = telebot.types.KeyboardButton('–ò–∑–º_–∏–≥—Ä–æ–∫–∞')
            item5 = telebot.types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')

            markup.add(item3, item4, item5)

            bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=markup)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_keyboard())

            bot.register_next_step_handler(message, admin_actions)
        else:
            admin_mode = True
            markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
            #item1 = telebot.types.KeyboardButton('–°—Ç–∞—Ä—Ç')
            #item2 = telebot.types.KeyboardButton('–§–∞–π–ª')
            item3 = telebot.types.KeyboardButton('–í—ã—Ö–æ–¥')
            item4 = telebot.types.KeyboardButton('–ò–∑–º_–∏–≥—Ä–æ–∫–∞')
            item5 = telebot.types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            markup.add(item3, item4, item5)

            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞!', reply_markup=markup)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_keyboard())

            bot.register_next_step_handler(message, admin_actions)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')

@bot.callback_query_handler(func=lambda call: call.data == 'exit')
def exit(call):
    global flag_exit
    message = call.message
    flag_exit = True
    verify_admin(message, 'admin')


def admin_actions(message):
    global admin_mode
    if message.text == '–°—Ç–∞—Ä—Ç':
        collect_data(message)
    elif message.text == '–§–∞–π–ª':
        send_file(message)
    elif message.text == '–í—ã—Ö–æ–¥':
        admin_mode = False
        bot.send_message(message.chat.id, '–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞', reply_markup=keyboard_start())
        start(message)
    elif message.text == '–ò–∑–º_–∏–≥—Ä–æ–∫–∞':
        admin_edit(message)
    elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        ask_for_continue(message)

@bot.message_handler(func=lambda message: message.text == '–ò–∑–º_–∏–≥—Ä–æ–∫–∞')
def admin_edit(message):
    global admin_mode
    if admin_mode:
        workbook = openpyxl.load_workbook('player_data.xlsx')
        worksheet = workbook.active
        player_names = []
        for row in range(2, worksheet.max_row + 1):
            player_names.append(worksheet.cell(row=row, column=1).value)
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2)
        for name in player_names:
            keyboard.add(telebot.types.KeyboardButton(name))
        keyboard.add(telebot.types.KeyboardButton('–Ω–∞–∑–∞–¥'))

        bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
                         reply_markup=keyboard)
        bot.register_next_step_handler(message, admin_edit_player_data)
    else:
        bot.send_message(chat_id=message.chat.id, text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º.')

def choose(message):
    if message.text == '–Ω–∞–∑–∞–¥':
        verify_admin(message, 'admin')


def admin_edit_player_data(message):
    global player_to_edit
    player_to_edit = message.text

    workbook = openpyxl.load_workbook('player_data.xlsx')
    worksheet = workbook.active

    if message.text == '–Ω–∞–∑–∞–¥':
        verify_admin(message, 'admin')
    else:
        for row in range(2, worksheet.max_row + 1):
            if worksheet.cell(row=row, column=1).value == player_to_edit:
                bot.send_message(chat_id=message.chat.id, text=f'–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player_to_edit}:\n'
                                                               f'–í–µ—Å: {worksheet.cell(row=row, column=2).value}\n'
                                                               f'–†–æ—Å—Ç: {worksheet.cell(row=row, column=3).value}\n'
                                                               f'–§–∞–∫—É–ª—å—Ç–µ—Ç: {worksheet.cell(row=row, column=4).value}\n'
                                                               f'–õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: {worksheet.cell(row=row, column=5).value}\n'
                                                               f'–õ—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±: {worksheet.cell(row=row, column=6).value}')

                bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?')
                keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2)
                keyboard.add(telebot.types.KeyboardButton('–ò–º—è'),
                             telebot.types.KeyboardButton('–í–µ—Å'),
                             telebot.types.KeyboardButton('–†–æ—Å—Ç'),
                             telebot.types.KeyboardButton('–§–∞–∫—É–ª—å—Ç–µ—Ç'),
                             telebot.types.KeyboardButton('–õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏'),
                             telebot.types.KeyboardButton('–õ—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±'),
                             telebot.types.KeyboardButton('–Ω–∞–∑–∞–¥'))
                bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', reply_markup=keyboard)
                bot.register_next_step_handler(message, admin_update_player_data)
                break
        else:
            bot.send_message(chat_id=message.chat.id, text='–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')


def admin_update_player_data(message):
    field_to_update = message.text

    bot.send_message(chat_id=message.chat.id, text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "{field_to_update}"')
    bot.register_next_step_handler(message, lambda m: admin_save_player_data(m, field_to_update))

def admin_save_player_data(message, field_to_update):
    new_value = message.text

    workbook = openpyxl.load_workbook('player_data.xlsx')
    worksheet = workbook.active

    for row in range(2, worksheet.max_row + 1):
        if worksheet.cell(row=row, column=1).value == player_to_edit:
            if field_to_update == '–ò–º—è':
                worksheet.cell(row=row, column=1, value=new_value.title())
                verify_admin(message, 'admin')
            elif field_to_update == '–í–µ—Å':
                worksheet.cell(row=row, column=2, value=new_value)
                verify_admin(message, 'admin')
            elif field_to_update == '–†–æ—Å—Ç':
                worksheet.cell(row=row, column=3, value=new_value)
                verify_admin(message, 'admin')
            elif field_to_update == '–§–∞–∫—É–ª—å—Ç–µ—Ç':
                worksheet.cell(row=row, column=4, value=new_value)
                verify_admin(message, 'admin')
            elif field_to_update == '–õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏':
                worksheet.cell(row=row, column=5, value=new_value.title())
                verify_admin(message, 'admin')
            elif field_to_update == '–õ—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±':
                worksheet.cell(row=row, column=6, value=new_value.title())
                verify_admin(message, 'admin')
            elif field_to_update == '–Ω–∞–∑–∞–¥':
                verify_admin(message, 'admin')
            workbook.save('player_data.xlsx')
            bot.send_message(chat_id=message.chat.id, text=f'–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player_to_edit} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
            break
    else:
        bot.send_message(chat_id=message.chat.id, text='–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')


@bot.message_handler(func=lambda message: message.text == 'üìÑ')
def edit_data(message):
    user_ip = message.chat.id
    if user_ip in player_registered:
        for row in range(1, sheet.max_row + 1):
            if sheet.cell(row=row, column=1).value == player_data['name']:
                bot.send_message(message.chat.id, f'–§–ò–û: {sheet.cell(row=row, column=1).value}')
                bot.send_message(message.chat.id, f"–í–µ—Å: {sheet.cell(row=row, column=2).value}")
                bot.send_message(message.chat.id, f"–†–æ—Å—Ç: {sheet.cell(row=row, column=3).value}")
                bot.send_message(message.chat.id, f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {sheet.cell(row=row, column=4).value}")
                bot.send_message(message.chat.id, f"–õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏: {sheet.cell(row=row, column=5).value}")
                bot.send_message(message.chat.id, f"–õ—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±: {sheet.cell(row=row, column=6).value}")
                markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
                item1 = telebot.types.KeyboardButton('–§–ò–û')
                item2 = telebot.types.KeyboardButton('–í–µ—Å')
                item3 = telebot.types.KeyboardButton('–†–æ—Å—Ç')
                item4 = telebot.types.KeyboardButton('–§–∞–∫—É–ª—å—Ç–µ—Ç')
                item5 = telebot.types.KeyboardButton('–õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏')
                item6 = telebot.types.KeyboardButton('–õ—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±')
                item7 = telebot.types.KeyboardButton('–ù–∞–∑–∞–¥')
                markup.add(item1, item2, item3, item4, item5, item6, item7)
                bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
                bot.register_next_step_handler(message, update_data)
                break
    else:
        bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
        start(message)

def update_data(message):
    if message.text == '–§–ò–û':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –§–ò–û:')
        bot.register_next_step_handler(message, update_name)
    elif message.text == '–í–µ—Å':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å:')
        bot.register_next_step_handler(message, update_weight)
    elif message.text == '–†–æ—Å—Ç':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç:')
        bot.register_next_step_handler(message, update_height)
    elif message.text == '–§–∞–∫—É–ª—å—Ç–µ—Ç':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:')
        bot.register_next_step_handler(message, update_faculty)
    elif message.text == '–õ—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏:')
        bot.register_next_step_handler(message, update_books)
    elif message.text == '–õ—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª—é–±–∏–º—ã–π —Ä–µ–≥–±–∏–π–Ω—ã–π –∫–ª—É–±:')
        bot.register_next_step_handler(message, update_club)
    elif message.text == '–ù–∞–∑–∞–¥':
        start(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        edit_data(message)

def update_name(message):
    player_data['name'] = message.text.title()
    update_row(message)

def update_weight(message):
    player_data['weight'] = message.text
    update_row(message)

def update_height(message):
    player_data['height'] = message.text
    update_row(message)

def update_faculty(message):
    player_data['faculty'] = message.text
    update_row(message)

def update_books(message):
    player_data['books'] = message.text.title()
    update_row(message)

def update_club(message):
    player_data['club'] = message.text.title()
    update_row(message)

def update_row(message):
    row_num = None
    for row in range(1, sheet.max_row + 1):
        if sheet.cell(row=row, column=1).value == player_data['name']:
            row_num = row
            break
    if row_num:
        sheet.cell(row=row_num, column=1, value=player_data['name'])
        sheet.cell(row=row_num, column=2, value=player_data['weight'])
        sheet.cell(row=row_num, column=3, value=player_data['height'])
        sheet.cell(row=row_num, column=4, value=player_data['faculty'])
        sheet.cell(row=row_num, column=5, value=player_data['books'])
        sheet.cell(row=row_num, column=6, value=player_data['club'])
        workbook.save('player_data.xlsx')
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
        start(message)
    else:
        bot.send_message(message.chat.id, '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        start(message)

@bot.message_handler(func=lambda message: True)
def cancel(message):
    bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')


def main():
    while True:

        schedule.run_pending()
        time.sleep(1)

        try:
            threading.Thread(bot.polling(none_stop=True)).start()
            #bot.polling()
        except Exception as E:
            logging.error(f'–æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {E}')
            continue


if __name__ == '__main__':
    main()